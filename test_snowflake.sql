CREATE DATABASE IF NOT EXISTS TEST_SNOWFLAKE_DATABASE;

CREATE SCHEMA IF NOT EXISTS TEST_SNOWFLAKE_SCHEMA;
CREATE SCHEMA IF NOT EXISTS TEST_SNOWFLAKE_ADDITIONAL;
CREATE SCHEMA IF NOT EXISTS TEST_SNOWFLAKE_PIPES;

CREATE TABLE IF NOT EXISTS TEST_SNOWFLAKE_SCHEMA.TEST_SNOWFLAKE_TABLE(
    player_id INT NOT NULL,
    device_id INT NOT NULL,
    install_date TIMESTAMP,
    client_id STRING,
    app_name STRING,
    country STRING
);

CREATE OR REPLACE STORAGE INTEGRATION TEST_SNOWFLAKE_INTEGRATION
    TYPE = EXTERNAL_STAGE
    STORAGE_PROVIDER = GCS
    ENABLED = TRUE
    STORAGE_ALLOWED_LOCATIONS = ('gcs://<bucket_test>');
    
DESC STORAGE INTEGRATION TEST_SNOWFLAKE_INTEGRATION;
    
CREATE OR REPLACE FILE FORMAT TEST_SNOWFLAKE_ADDITIONAL.JSON
    TYPE = JSON;
 
CREATE OR REPLACE STAGE TEST_SNOWFLAKE_DATABASE.TEST_SNOWFLAKE_SCHEMA.STAGE_JSON
    //STORAGE_INTEGRATION = TEST_SNOWFLAKE_INTEGRATION
    FILE_FORMAT=TEST_SNOWFLAKE_ADDITIONAL.JSON;
    
CREATE OR REPLACE TABLE TEST_SNOWFLAKE_DATABASE.TEST_SNOWFLAKE_ADDITIONAL.JSON_TEST(v variant);

SELECT * FROM TEST_SNOWFLAKE_DATABASE.TEST_SNOWFLAKE_ADDITIONAL.JSON_TEST LIMIT 100;

COPY INTO TEST_SNOWFLAKE_DATABASE.TEST_SNOWFLAKE_ADDITIONAL.JSON_TEST
  FROM @TEST_SNOWFLAKE_SCHEMA.STAGE_JSON
  FILE_FORMAT=(TYPE='JSON' STRIP_OUTER_ARRAY = TRUE);

SELECT * FROM TEST_SNOWFLAKE_DATABASE.TEST_SNOWFLAKE_ADDITIONAL.JSON_TEST LIMIT 100;

DESC STORAGE INTEGRATION TEST_SNOWFLAKE_INTEGRATION;

//CREATE OR REPLACE NOTIFICATION INTEGRATION TEST_NOTIFICATION
//    TYPE = QUEUE
//    NOTIFICATION_PROVIDER = GCP_PUBSUB
//    ENABLED = TRUE
//    GCP_PUBSUB_SUBSCRIPTION_NAME = '<subscription_id>';

CREATE OR REPLACE PIPE TEST_SNOWFLAKE_PIPES.EVENT_PIPES 
//    AUTO_INGEST = TRUE
//    INTEGRATION = TEST_NOTIFICATION
AS
    COPY INTO TEST_SNOWFLAKE_DATABASE.TEST_SNOWFLAKE_ADDITIONAL.JSON_TEST
    FROM @TEST_SNOWFLAKE_SCHEMA.STAGE_JSON
    FILE_FORMAT=(TYPE='JSON' STRIP_OUTER_ARRAY = TRUE);

SHOW PIPES;

select SYSTEM$PIPE_STATUS('TEST_SNOWFLAKE_PIPES.EVENT_PIPES');
select SYSTEM$STREAM_HAS_DATA('TEST_STREAM');

LIST @TEST_SNOWFLAKE_SCHEMA.STAGE_JSON;

CREATE OR REPLACE STREAM TEST_STREAM ON TABLE TEST_SNOWFLAKE_DATABASE.TEST_SNOWFLAKE_ADDITIONAL.JSON_TEST;

CREATE OR REPLACE TASK TEST_TASK
    WAREHOUSE = COMPUTE_WH
    SCHEDULE = '4 MINUTE'
    WHEN SYSTEM$STREAM_HAS_DATA('TEST_STREAM')
    AS
MERGE INTO TEST_SNOWFLAKE_DATABASE.TEST_SNOWFLAKE_SCHEMA.TEST_SNOWFLAKE_TABLE AS ev
USING(
    SELECT
    v:event_data.data.eventData.app_user_id::INT AS player_id,
    v:event_data.data.eventData.platformAccountId::INT AS device_id,
    v:event_data.timestampClient::TIMESTAMP AS install_date,
    v:event_data.platform::STRING AS client_id,
    v:event_data.appName::STRING AS app_name,
    v:event_data.countryCode::STRING AS country
    FROM TEST_SNOWFLAKE_DATABASE.TEST_SNOWFLAKE_ADDITIONAL.JSON_TEST
    WHERE v:event_data.data.eventData.eventType = 'server_install'
) AS sche ON ev.player_id = sche.player_id
WHEN NOT MATCHED 
THEN INSERT
    (player_id, device_id, install_date, client_id, app_name, country)
VALUES 
    (sche.player_id, sche.device_id, sche.install_date, sche.client_id, sche.app_name, sche.country);

SHOW TASKS;

ALTER TASK TEST_TASK RESUME;

SELECT * FROM TEST_SNOWFLAKE_SCHEMA.TEST_SNOWFLAKE_TABLE;